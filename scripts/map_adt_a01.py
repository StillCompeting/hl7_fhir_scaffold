"""Convert HL7 ADT_A01 message to FHIR Bundle.

Autogenerated scaffold. Replace the logic inside `hl7_to_fhir`
with a real fieldâ€‘level mapping.

Dependencies:
    pip install hl7apy fhir.resources
"""  # noqa: E501

from hl7apy import parser
from fhir.resources.bundle import Bundle

def _construct(model_cls, **fields):
    """Compatibility wrapper for Pydantic v1 and v2."""
    if hasattr(model_cls, "model_construct"):
        return model_cls.model_construct(**fields)  # Pydantic >=2
    return model_cls.construct(**fields)

STUB_HL7_MESSAGE = (
    "MSH|^~\\&|SendingApp|SendingFac|ReceivingApp|ReceivingFac|20250420130120||ADT|123456|P|2.5\r"
    "PID|1||12345^^^MR||Doe^John||19800101|M\r"
)  # noqa: E501


def hl7_to_fhir(hl7_str: str) -> Bundle:
    """Convert HL7 ADT_A01 message to a FHIR Bundle with MessageHeader and Patient resources."""
    msg = parser.parse_message(hl7_str)
    msh = msg.MSH
    pid = msg.PID

    # Create Bundle
    bundle = _construct(
        Bundle,
        type="message",
        meta={"tag": [{"code": "ADT_A01"}]},
        entry=[],
    )

    # Import FHIR resource classes
    from fhir.resources.bundle import BundleEntry
    from fhir.resources.messageheader import MessageHeader
    from fhir.resources.coding import Coding
    from fhir.resources.patient import Patient
    from fhir.resources.humanname import HumanName
    import datetime

    # Map MessageHeader
    coding = _construct(
        Coding,
        system="http://terminology.hl7.org/CodeSystem/message-event",
        code=msh.MSH_9.value,
    )
    mh = _construct(
        MessageHeader,
        eventCoding=coding,
        id="message-header",
        source={"name": msh.MSH_3.value},
        destination=[{"name": msh.MSH_5.value}],
    )
    ts = msh.MSH_7.value
    dt = datetime.datetime.strptime(ts, "%Y%m%d%H%M%S")
    if hasattr(mh, "timestamp"):
        object.__setattr__(mh, "timestamp", dt.isoformat())

    mh_entry = _construct(
        BundleEntry,
        fullUrl="urn:uuid:message-header",
        resource=mh,
    )
    bundle.entry.append(mh_entry)

    # Map Patient
    patient_id = pid.PID_3.value.split("^")[0]
    parts = pid.PID_5.value.split("^")
    name = _construct(
        HumanName,
        family=parts[0],
        given=[parts[1] if len(parts) > 1 else ""],
    )
    bd = pid.PID_7.value
    pat = _construct(
        Patient,
        id=patient_id,
        name=[name],
        birthDate=datetime.datetime.strptime(bd, "%Y%m%d").date().isoformat(),
        gender="male" if pid.PID_8.value.upper() == "M" else "female",
    )

    pat_entry = _construct(
        BundleEntry,
        fullUrl=f"urn:uuid:patient-{patient_id}",
        resource=pat,
    )
    bundle.entry.append(pat_entry)

    return bundle


if __name__ == "__main__":
    bundle = hl7_to_fhir(
        STUB_HL7_MESSAGE
    )
    print(bundle.json(indent=2))
