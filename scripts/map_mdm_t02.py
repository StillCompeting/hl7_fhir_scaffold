"""Convert HL7 MDM_T02 message to FHIR Bundle.

Autogenerated scaffold. Replace the logic inside `hl7_to_fhir`
with a real fieldâ€‘level mapping.

Dependencies:
    pip install hl7apy fhir.resources
"""  # noqa: E501

from hl7apy import parser
from fhir.resources.bundle import Bundle

STUB_HL7_MESSAGE = """MSH|^~\\&|SendingApp|SendingFac|ReceivingApp|ReceivingFac|20250420130120||MDM|123456|P|2.5
PID|1||12345^^^MR||Doe^John||19800101|M
"""  # noqa: E501


def hl7_to_fhir(hl7_str: str) -> Bundle:
    """Convert HL7 MDM_T02 message to a FHIR Bundle with MessageHeader and Patient resources."""
    msg = parser.parse_message(hl7_str)
    msh = msg.MSH
    pid = msg.PID

    bundle = Bundle.model_construct()
    bundle.type = "message"
    bundle.meta = {"tag": [{"code": "MDM_T02"}]}
    bundle.entry = []

    from fhir.resources.bundle import BundleEntry
    from fhir.resources.messageheader import MessageHeader
    from fhir.resources.coding import Coding
    from fhir.resources.patient import Patient
    from fhir.resources.humanname import HumanName
    import datetime

    mh = MessageHeader.model_construct()
    mh.eventCoding = Coding.model_construct()
    mh.eventCoding.system = "http://terminology.hl7.org/CodeSystem/message-event"
    mh.eventCoding.code = msh.MSH_9.value
    mh.id = "message-header"
    mh.source = {"name": msh.MSH_3.value}
    mh.destination = [{"name": msh.MSH_5.value}]
    ts = msh.MSH_7.value
    dt = datetime.datetime.strptime(ts, "%Y%m%d%H%M%S")
    mh.timestamp = dt.isoformat()

    mh_entry = BundleEntry.model_construct()
    mh_entry.fullUrl = "urn:uuid:message-header"
    mh_entry.resource = mh
    bundle.entry.append(mh_entry)

    pat = Patient.model_construct()
    pat.id = pid.PID_3.value.split("^")[0]
    parts = pid.PID_5.value.split("^")
    pat.name = [HumanName.model_construct(family=parts[0], given=[parts[1] if len(parts) > 1 else ""])]
    bd = pid.PID_7.value
    pat.birthDate = datetime.datetime.strptime(bd, "%Y%m%d").date().isoformat()
    pat.gender = "male" if pid.PID_8.value.upper() == "M" else "female"

    pat_entry = BundleEntry.model_construct()
    pat_entry.fullUrl = f"urn:uuid:patient-{pat.id}"
    pat_entry.resource = pat
    bundle.entry.append(pat_entry)

    return bundle


if __name__ == "__main__":
    bundle = hl7_to_fhir(
        STUB_HL7_MESSAGE
    )
    print(bundle.json(indent=2))
